import argparse
import os
import string

SOURCE_FMT = """// AUTOGENERATED
// Generated by file_to_cpp_string.py, from '{file_name}'

namespace {namespace} {{

const {var_type} {var_name}[] = {{
{raw_lines}
}};

const size_t {var_name}_size = {total_data_size};

}} // {namespace}

// AUTOGENERATED
"""


def readfile(path):
    with open(path, 'rb') as f:
        return f.read()


def take_batches(lst, batch_size):
    return (lst[start:start+batch_size] for start in range(0, len(lst), batch_size))


def build_embedded_binary_array(original_file_bytes, column_limit=120):
    file_as_strings = ['0x{:02x}'.format(n) for n in original_file_bytes]
    lines = ('\t' + ', '.join(batch) for batch in take_batches(file_as_strings, column_limit // 6))
    return ',\n'.join(lines)


def as_c_string(n):
    c = chr(n)
    if c not in string.printable:
        return r'\x{:02x}'.format(n)

    if c == '"':
        return '\"'

    return c


def build_embedded_c_string(original_file_bytes):
    printable_file_bytes = ''.join(as_c_string(c) for c in original_file_bytes)
    lines = printable_file_bytes.splitlines(True)
    c_string_lines = ('\t"{}"'.format(l) for l in lines)
    lines_fixed_seperator = (l.replace('\n', '\\n') for l in c_string_lines)
    return '\n'.join(lines_fixed_seperator)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-s', '--src-path', help='source file to stringify', required=True)
    parser.add_argument('-d', '--dest-path', help='generated files dir', required=True)
    parser.add_argument('-ns', '--namespace', help='namespace of the generated arguments', required=True)
    parser.add_argument('-b', '--binary', help='embeds the file as a binary resource, an array of unsigned char', action='store_true')

    args = parser.parse_args()

    original_bytes = readfile(args.src_path)

    file_name = os.path.basename(args.src_path)
    var_type = 'unsigned char' if args.binary else 'char'
    var_name = file_name.replace('.', '_')
    raw_lines = build_embedded_binary_array(original_bytes) if args.binary else build_embedded_c_string(original_bytes)
    total_data_size = len(original_bytes)

    with open(os.path.join(args.dest_path, var_name + '.cpp'), 'w') as f:
        f.write(SOURCE_FMT.format(file_name=file_name, namespace=args.namespace, var_type=var_type, var_name=var_name,
                                  raw_lines=raw_lines, total_data_size=total_data_size))

if __name__ == '__main__':
    main()
