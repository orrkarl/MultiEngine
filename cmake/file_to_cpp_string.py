import argparse
import os
import string

HEADER_FMT = """// AUTOGENERATED
// Generated by file_to_cpp_string.py, from '{file_name}'

#pragma once

namespace {namespace} {{

extern const char {var_name}[{total_data_size}];

}} // {namespace}

// AUTOGENERATED
"""

SOURCE_FMT = """// AUTOGENERATED
// Generated by file_to_cpp_string.py, from '{file_name}'

#include "{header_path}"

namespace {namespace} {{

const char {var_name}[] = {{
{raw_lines}
}};

}} // {namespace}

// AUTOGENERATED
"""


def readfile(path):
    with open(path, 'rb') as f:
        return f.read()


def to_c_string_elem(c):
    if c == b'"':
        return rb'\"'

    if chr(c) in string.printable:
        return bytes([c])

    raise RuntimeError('cannot encode character')


def to_raw_c_string(s):
    return b''.join((map(to_c_string_elem, s)))


def read_src_files(root_dir, file_names):
    return map(lambda name: readfile(os.path.join(root_dir, name)), file_names)


def make_defn_lines(raw_file_contents):
    split_by_newline = raw_file_contents.split(b'\n')
    for i in range(len(split_by_newline) - 1):
        split_by_newline[i] += b'\\n'

    ret = bytearray()
    for l in split_by_newline[:-1]:
        ret.extend(b'"' + to_raw_c_string(l) + b'"\n')
    ret.extend(b'"' + to_raw_c_string(split_by_newline[-1]) + b'"')

    return ret.decode('ascii')


def convert(src, dst, namespace):
    src_full_file_name = os.path.basename(src)
    src_file_name = os.path.splitext(src_full_file_name)[0]
    src_data = readfile(src)

    generated_header_path = os.path.join(dst, src_file_name + '.h')
    generated_source_path = os.path.join(dst, src_file_name + '.cpp')

    header_contents = HEADER_FMT.format(
        file_name=src_full_file_name, var_name=src_file_name, namespace=namespace, total_data_size=len(src_data) + 1)
    source_contents = SOURCE_FMT.format(
        file_name=src_full_file_name, var_name=src_file_name, namespace=namespace, raw_lines=make_defn_lines(src_data),
        header_path=os.path.relpath(generated_header_path, os.path.dirname(generated_source_path)))

    with open(generated_header_path, 'wb') as f:
        f.write(bytes(map(ord, header_contents)))
    with open(generated_source_path, 'wb') as f:
        f.write(bytes(map(ord, source_contents)))


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-s', '--src-path', help='source file to stringify', required=True)
    parser.add_argument('-d', '--dest-path', help='generated files dir', required=True)
    parser.add_argument('-ns', '--namespace', help='namespace of the generated arguments', required=True)

    args = parser.parse_args()
    convert(args.src_path, args.dest_path, args.namespace)


if __name__ == '__main__':
    main()
