#include "TriangleSetupAPI.h"

#include "autogenerated/GPUCodeResources.h"

#include "../../entrypoints/main/TriangleSetup.h"
#include "../APIUtils.h"

namespace vkr {
namespace gpu {

namespace detail {

const size_t TriangleSetupLayout::MODULE_SIZE = device_side::TriangleSetup_comp_count;
const uint32_t* TriangleSetupLayout::MODULE_DATA = device_side::TriangleSetup_comp;
const std::array<VkDescriptorSetLayoutBinding, 4> TriangleSetupLayout::BINDINGS = {
    VkDescriptorSetLayoutBinding { RASTER_CONFIG_POS.second,
                                   VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
                                   1,
                                   VkShaderStageFlagBits::VK_SHADER_STAGE_COMPUTE_BIT,
                                   nullptr },
    VkDescriptorSetLayoutBinding { VERTECIES_POS.second,
                                   VK_DESCRIPTOR_TYPE_STORAGE_BUFFER,
                                   1,
                                   VkShaderStageFlagBits::VK_SHADER_STAGE_COMPUTE_BIT,
                                   nullptr },
    VkDescriptorSetLayoutBinding { COLORS_POS.second,
                                   VK_DESCRIPTOR_TYPE_STORAGE_BUFFER,
                                   1,
                                   VkShaderStageFlagBits::VK_SHADER_STAGE_COMPUTE_BIT,
                                   nullptr },
    VkDescriptorSetLayoutBinding { TRIANGLE_BLOCKS_POS.second,
                                   VK_DESCRIPTOR_TYPE_STORAGE_BUFFER,
                                   1,
                                   VkShaderStageFlagBits::VK_SHADER_STAGE_COMPUTE_BIT,
                                   nullptr },
};
const std::array<uint32_t, 2> TriangleSetupLayout::SETS = { 1, 3 };
const VkPushConstantRange TriangleSetupLayout::PUSH_ARGS = { VkShaderStageFlagBits::VK_SHADER_STAGE_COMPUTE_BIT,
                                                             VERTEX_COUNT_OFFSET,
                                                             VERTEX_COUNT_SIZE + MVP_SIZE };
const std::array<uint32_t, 3> TriangleSetupLayout::GROUP_SIZES { TRIANGLE_SETUP_LOCAL_SIZE_X,
                                                                 TRIANGLE_SETUP_LOCAL_SIZE_Y,
                                                                 TRIANGLE_SETUP_LOCAL_SIZE_Z };

} // namespace detail

VkWriteDescriptorSet TriangleSetupAPI::describeRasterConfigUpdate(const TriangleSetupAPI::Arguments& args,
                                                                  const VkDescriptorBufferInfo& rasterConfigBuffer) {
    return describeSimpleBufferUpdate(args[Layout::RASTER_CONFIG_POS.first],
                                      Layout::RASTER_CONFIG_POS.second,
                                      VkDescriptorType::VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
                                      rasterConfigBuffer);
}

VkWriteDescriptorSet TriangleSetupAPI::describeVertexUpdate(const Arguments& args,
                                                            const VkDescriptorBufferInfo& vertexBuffer) {
    return describeSimpleBufferUpdate(args[Layout::VERTECIES_POS.first],
                                      Layout::VERTECIES_POS.second,
                                      VkDescriptorType::VK_DESCRIPTOR_TYPE_STORAGE_BUFFER,
                                      vertexBuffer);
}

VkWriteDescriptorSet TriangleSetupAPI::describeColorUpdate(const Arguments& args,
                                                           const VkDescriptorBufferInfo& colorBuffer) {
    return describeSimpleBufferUpdate(args[Layout::COLORS_POS.first],
                                      Layout::COLORS_POS.second,
                                      VkDescriptorType::VK_DESCRIPTOR_TYPE_STORAGE_BUFFER,
                                      colorBuffer);
}

VkWriteDescriptorSet TriangleSetupAPI::describeTriangleBlocksUpdate(const Arguments& args,
                                                                    const VkDescriptorBufferInfo& triangleBlocks) {
    return describeSimpleBufferUpdate(args[Layout::TRIANGLE_BLOCKS_POS.first],
                                      Layout::TRIANGLE_BLOCKS_POS.second,
                                      VkDescriptorType::VK_DESCRIPTOR_TYPE_STORAGE_BUFFER,
                                      triangleBlocks);
}

void TriangleSetupAPI::cmdUpdateVertexCount(VkCommandBuffer cmdBuffer, uint32_t vertexCount) {
    vkCmdPushConstants(cmdBuffer,
                       m_runnerDesc,
                       VkShaderStageFlagBits::VK_SHADER_STAGE_COMPUTE_BIT,
                       Layout::VERTEX_COUNT_OFFSET,
                       Layout::VERTEX_COUNT_SIZE,
                       &vertexCount);
}

void TriangleSetupAPI::cmdUpdateMVP(VkCommandBuffer cmdBuffer, float* mvp4x4) {
    vkCmdPushConstants(cmdBuffer,
                       m_runnerDesc,
                       VkShaderStageFlagBits::VK_SHADER_STAGE_COMPUTE_BIT,
                       Layout::MVP_OFFSET,
                       Layout::MVP_SIZE,
                       mvp4x4);
}

} // namespace gpu
} // namespace vkr
