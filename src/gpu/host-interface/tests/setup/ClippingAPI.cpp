#include "ClippingAPI.h"

#include "../../APIUtils.h"
#include "../autogenerated/GPUTestResources.h"

namespace vkr {
namespace gpu {
namespace tests {

namespace detail {

const size_t ClippingLayout::MODULE_SIZE = device_side::tests::Clipping_comp_count;
const uint32_t* ClippingLayout::MODULE_DATA = device_side::tests::Clipping_comp;
const std::array<VkDescriptorSetLayoutBinding, 3> ClippingLayout::BINDINGS = {
    VkDescriptorSetLayoutBinding { VERTECIES_POS.second,
                                   VK_DESCRIPTOR_TYPE_STORAGE_BUFFER,
                                   1,
                                   VkShaderStageFlagBits::VK_SHADER_STAGE_COMPUTE_BIT,
                                   nullptr },
    VkDescriptorSetLayoutBinding { CLIPPED_VERTECIES_POS.second,
                                   VK_DESCRIPTOR_TYPE_STORAGE_BUFFER,
                                   1,
                                   VkShaderStageFlagBits::VK_SHADER_STAGE_COMPUTE_BIT,
                                   nullptr },
    VkDescriptorSetLayoutBinding { CLIPPED_VERTEX_COUNTS.second,
                                   VK_DESCRIPTOR_TYPE_STORAGE_BUFFER,
                                   1,
                                   VkShaderStageFlagBits::VK_SHADER_STAGE_COMPUTE_BIT,
                                   nullptr },
};
const std::array<uint32_t, 1> ClippingLayout::SETS = { 3 };
const std::array<VkPushConstantRange, 1> ClippingLayout::PUSH_ARGS = {
    { VkShaderStageFlagBits::VK_SHADER_STAGE_COMPUTE_BIT, TRIANGLE_COUNT_OFFSET, TRIANGLE_COUNT_SIZE }
};

}

VkWriteDescriptorSet ClippingAPI::describeVerteciesUpdate(VkDescriptorSet args,
                                                          const VkDescriptorBufferInfo& vertecies) {
    return describeSimpleBufferUpdate(
        args, Layout::VERTECIES_POS.second, VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, vertecies);
}

VkWriteDescriptorSet
ClippingAPI::describeClippedVerteciesUpdate(VkDescriptorSet args,
                                            const VkDescriptorBufferInfo& clippedVertecies) {
    return describeSimpleBufferUpdate(
        args, Layout::CLIPPED_VERTECIES_POS.second, VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, clippedVertecies);
}

VkWriteDescriptorSet
ClippingAPI::describeClippedVertexCountsUpdate(VkDescriptorSet args,
                                               const VkDescriptorBufferInfo& clippedVertexCounts) {
    return describeSimpleBufferUpdate(
        args, Layout::CLIPPED_VERTEX_COUNTS.second, VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, clippedVertexCounts);
}

void ClippingAPI::cmdUpdateTriangleCount(VkCommandBuffer cmdBuffer, u32 triangleCount) {
    vkCmdPushConstants(cmdBuffer,
                       m_runnerDesc,
                       VkShaderStageFlagBits::VK_SHADER_STAGE_COMPUTE_BIT,
                       0,
                       sizeof(triangleCount),
                       &triangleCount);
}

}
}
}
